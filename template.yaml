AWSTemplateFormatVersion: '2010-09-09'
Description: 'Serverless Job Processing Stack with API Gateway v2.0, Lambda, SQS, DynamoDB, and S3'

Parameters:
  Project:
    Type: String
    Description: Project name tag to be applied to all resources
    Default: JobProcessingDemo
  
  UserPoolArn:
    Type: String
    Description: ARN of the existing Cognito User Pool
  
  IssuerUrl:
    Type: String
    Description: The issuer URL of the existing User Pool
  
  CognitoClientId:
    Type: String
    Description: Cognito App Client ID
  
  ApiEnv:
    Type: String
    Description: Environment for API deployment
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod

  CodeBucketName:
    Type: String
    Description: S3 bucket name for Lambda code deployment
  

Resources:
  # S3 Bucket for job files
  JobsDemoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'jobsdemobucket-${AWS::AccountId}-${AWS::Region}'
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfter30Minutes
            Status: Enabled
            ExpirationInDays: 1
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Project
          Value: !Ref Project

  # DynamoDB Table for jobs
  JobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Project}-jobs'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: job_id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: createdAt
          AttributeType: S
      KeySchema:
        - AttributeName: job_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: user-date-index
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
            - AttributeName: createdAt
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      Tags:
        - Key: Project
          Value: !Ref Project

  # SQS Queue for job processing
  JobsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${Project}-jobs-queue'
      VisibilityTimeout: 120
      MessageRetentionPeriod: 1209600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt JobsDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Project
          Value: !Ref Project

  # Dead Letter Queue
  JobsDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${Project}-jobs-dlq'
      MessageRetentionPeriod: 1209600
      Tags:
        - Key: Project
          Value: !Ref Project

  # CloudWatch Log Groups
  JobHandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${Project}-jobhandler'
      RetentionInDays: 14

  JobHandlerWorkerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${Project}-jobhandlerworker'
      RetentionInDays: 14

  # IAM Role for JobHandler Lambda
  JobHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Project}-JobHandlerRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: JobHandlerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt JobsQueue.Arn
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource: 
                  - !GetAtt JobsTable.Arn
                  - !Sub '${JobsTable.Arn}/index/*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub '${JobsDemoBucket.Arn}/*'

              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub '${JobHandlerLogGroup.Arn}:*'
      Tags:
        - Key: Project
          Value: !Ref Project

  # IAM Role for JobHandlerWorker Lambda
  JobHandlerWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Project}-JobHandlerWorkerRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: JobHandlerWorkerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt JobsQueue.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource: !Sub '${JobsDemoBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                Resource: !GetAtt JobsTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub '${JobHandlerWorkerLogGroup.Arn}:*'
      Tags:
        - Key: Project
          Value: !Ref Project

  # JobHandler Lambda Function (Updated for API Gateway v2.0)
  JobHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Project}-jobhandler'
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt JobHandlerRole.Arn
      Timeout: 60
      MemorySize: 128
      Environment:
        Variables:
          JOBS_QUEUE_URL: !Ref JobsQueue
          JOBS_TABLE_NAME: !Ref JobsTable
          S3_BUCKET_NAME: !Ref JobsDemoBucket
      Code:
        S3Bucket: !Sub '${CodeBucketName}'
        S3Key: lambda/jobhandler.zip
      Tags:
        - Key: Project
          Value: !Ref Project

  # JobHandlerWorker Lambda Function (unchanged)
  JobHandlerWorkerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${Project}-jobhandlerworker'
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt JobHandlerWorkerRole.Arn
      Timeout: 60
      MemorySize: 128
      Environment:
        Variables:
          JOBS_TABLE_NAME: !Ref JobsTable
          S3_BUCKET_NAME: !Ref JobsDemoBucket
      Code:
        S3Bucket: !Sub '${CodeBucketName}'
        S3Key: lambda/jobworker.zip
      Tags:
        - Key: Project
          Value: !Ref Project

  # Event Source Mapping for SQS to Lambda
  JobHandlerWorkerEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt JobsQueue.Arn
      FunctionName: !Ref JobHandlerWorkerFunction
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 5

  # API Gateway v2.0 (HTTP API)
  JobProcessingApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub '${Project}-JobProcessingApi'
      Description: 'HTTP API for job processing'
      ProtocolType: HTTP
      CorsConfiguration:
        AllowCredentials: false
        AllowHeaders:
          - Content-Type
          - Authorization
          - X-Amz-Date
          - X-Api-Key
          - X-Amz-Security-Token
        AllowMethods:
          - GET
          - POST
          - OPTIONS
        AllowOrigins:
          - '*'
        MaxAge: 86400
      Tags:
        Project: !Ref Project

  # JWT Authorizer for API Gateway v2.0
  JwtAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: !Sub '${Project}-JwtAuthorizer'
      ApiId: !Ref JobProcessingApi
      AuthorizerType: JWT
      IdentitySource:
        - $request.header.Authorization
      JwtConfiguration:
        Audience:
          - !Ref CognitoClientId
        Issuer: !Ref IssuerUrl

  # Lambda Integration
  JobHandlerIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref JobProcessingApi
      IntegrationType: AWS_PROXY
      IntegrationMethod: POST
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${JobHandlerFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  # Routes
  JobPostRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref JobProcessingApi
      RouteKey: 'POST /job'
      AuthorizationType: JWT
      AuthorizerId: !Ref JwtAuthorizer
      Target: !Sub 'integrations/${JobHandlerIntegration}'

  JobGetRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref JobProcessingApi
      RouteKey: 'GET /job'
      AuthorizationType: JWT
      AuthorizerId: !Ref JwtAuthorizer
      Target: !Sub 'integrations/${JobHandlerIntegration}'

  JobsGetRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref JobProcessingApi
      RouteKey: 'GET /jobs'
      AuthorizationType: JWT
      AuthorizerId: !Ref JwtAuthorizer
      Target: !Sub 'integrations/${JobHandlerIntegration}'

  PingRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref JobProcessingApi
      RouteKey: 'GET /ping'
      AuthorizationType: JWT
      AuthorizerId: !Ref JwtAuthorizer
      Target: !Sub 'integrations/${JobHandlerIntegration}'

  # Stage (automatically deploys in v2.0)
  JobProcessingApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref JobProcessingApi
      StageName: !Ref ApiEnv
      Description: !Sub 'Deployment for ${ApiEnv} environment'
      AutoDeploy: true
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
        ThrottlingBurstLimit: 100
        ThrottlingRateLimit: 50
      AccessLogSettings:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","routeKey":"$context.routeKey","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength","error":"$context.error.message","integrationError":"$context.integration.error"}'
      Tags:
        Project: !Ref Project

  # Lambda Permission for API Gateway v2.0
  JobHandlerLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref JobHandlerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${JobProcessingApi}/*/*'

  # CloudWatch Log Group for API Gateway
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${Project}-JobProcessingApi'
      RetentionInDays: 14

Outputs:
  ApiGatewayUrl:
    Description: 'API Gateway URL'
    Value: !Sub 'https://${JobProcessingApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiEnv}'
    Export:
      Name: !Sub '${Project}-ApiGatewayUrl'

  ApiGatewayId:
    Description: 'API Gateway ID'
    Value: !Ref JobProcessingApi
    Export:
      Name: !Sub '${Project}-ApiGatewayId'

  JobsTableName:
    Description: 'DynamoDB Jobs Table Name'
    Value: !Ref JobsTable
    Export:
      Name: !Sub '${Project}-JobsTableName'

  JobsQueueUrl:
    Description: 'SQS Jobs Queue URL'
    Value: !Ref JobsQueue
    Export:
      Name: !Sub '${Project}-JobsQueueUrl'

  S3BucketName:
    Description: 'S3 Bucket Name for job files'
    Value: !Ref JobsDemoBucket
    Export:
      Name: !Sub '${Project}-S3BucketName'

  JobHandlerFunctionName:
    Description: 'Job Handler Lambda Function Name'
    Value: !Ref JobHandlerFunction
    Export:
      Name: !Sub '${Project}-JobHandlerFunctionName'

  JobHandlerWorkerFunctionName:
    Description: 'Job Handler Worker Lambda Function Name'
    Value: !Ref JobHandlerWorkerFunction
    Export:
      Name: !Sub '${Project}-JobHandlerWorkerFunctionName'

  JwtAuthorizerId:
    Description: 'JWT Authorizer ID'
    Value: !Ref JwtAuthorizer
    Export:
      Name: !Sub '${Project}-JwtAuthorizerId'